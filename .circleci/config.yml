# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/build

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    
    steps:
      - checkout

      - run: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]
            then
                text=`git log $CIRCLE_BRANCH --not origin/master --pretty=oneline`
                while read -r line; do
                    output=`echo $line|grep -i "scoop-[0-9]\|[skip ci]\|[maven-release-plugin]"`
                    if [[ $output ]]
                    then
                        echo "" > /dev/null
                    else
                        echo $line
                        echo "No Jira id found for atleast one of the commits"
                        exit 1
                    fi
                done <<< "$text"
            fi
      
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
        
      # run tests!
      - run: mvn integration-test
      
      
      - run: |            
            if [[ "$CIRCLE_BRANCH" = "master" ]]
            then
                tag=`git tag --sort=-creatordate|head -n1`
                # tag1=`git tag --sort=-creatordate|head -n2|tail -n1`
                count=`git tag|wc -l`

                if [[ $count -ne 0 ]]
                then
                    git log --pretty=oneline $tag..master --no-merges|grep -oi "scoop-[0-9]*"| tr '[:lower:]' '[:upper:]'| sort | uniq > content.txt
                else
                    git log --pretty=oneline master --no-merges|grep -oi "scoop-[0-9]*"| tr '[:lower:]' '[:upper:]'| sort | uniq > content.txt
                fi
                version=`mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version| sed -n -e '/^\[.*\]/ !{ /^[0-9]/ { p; q } }'| sed -e 's/[^0-9][^0-9]*$//'`

                if [[ ! -f changes.txt ]]
                then
                   touch changes.txt
                fi
                
                while read -r line; do
                  #echo $line
                  curl  -X GET -H "Authorization: Basic cHJhdGlrZ0B4cGFueGlvbi5jby5pbjpKYW4xMjM0NUAyMDE4" \
                  -H "Content-Type: application/json" "https://scoperetail.atlassian.net/rest/api/2/issue/$line?fields=summary,status" -o jira.json -s
                  summary=`cat jira.json|jq '.fields.summary'|cut -d "\"" -f 2`
                  status=`cat jira.json|jq '.fields.status.name'|cut -d "\"" -f 2`
                  echo "$line: $summary ($status)" >> jira.txt
                done <<< $(<content.txt)

                echo $version > latests.txt
                sed -e 's/^/ \* /' jira.txt >> latests.txt

                cat latests.txt changes.txt > new_changes.txt
                echo "" >> new_changes.txt
                cat new_changes.txt > changes.txt
                git add changes.txt
                git commit -m "[skip ci] changes.txt updated"
                git push
                        
                git config --global user.email "pratikghodekar@gmail.com"
                git config --global user.name "pratikghodekar" 
                mvn -s .circleci/.circleci.settings.xml -B release:prepare release:perform                
            fi

  deploy:
    working_directory: ~/deploy
    docker:
      - image: ansible/ansible:ubuntu1604
    steps:
      - checkout
    
      - run:
          name: Clone git repo
          command: |            
            git clone git@github.com:pratik-ansible/backend-server.git
            
 
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
#      - deploy:
#           requires:
#              - build
