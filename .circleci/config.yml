# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/build

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    
    steps:
      - checkout

      - run: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]
            then
                text=`git log $CIRCLE_BRANCH --not origin/master --pretty=oneline`
                while read -r line; do
                    output=`echo $line|grep -i "scoop-[0-9]\|[skip ci]\|[maven-release-plugin]"`
                    if [[ $output ]]
                    then
                        echo "" > /dev/null
                    else
                        echo $line
                        echo "No Jira id found for atleast one of the commits"
                        exit 1
                    fi
                done <<< "$text"
            fi
      
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
        
      # run tests!
      - run: mvn integration-test
      
      
      - run: |            
            if [[ "$CIRCLE_BRANCH" = "master" ]]
            then
                git config --global user.email "pratikghodekar@gmail.com"
                git config --global user.name "pratikghodekar" 
                #mvn -s .circleci/.circleci.settings.xml -B release:prepare release:perform
                
                echo 1 > a.txt

                tag2=`git tag --sort=-creatordate|head -n1`
                echo 2 > a.txt
                tag1=`git tag --sort=-creatordate|head -n2|tail -n1`
                echo 3 > a.txt
                
                if [[ tag2 != tag1 ]]
                then
                    content=`git log --pretty=oneline $tag1..$tag2|grep -oi "scoop-[0-9]*"|uniq`
                    echo 4 > a.txt
                    version=`echo $tag2|grep -io "\([0-9]\+\([.][0-9]\+\)\+\)"`
                    echo 5 > a.txt
                else
                    content=`git log --pretty=oneline $tag1|grep -oi "scoop-[0-9]*"|uniq`
                    echo 6 > a.txt
                    version=`echo $tag1|grep -io "\([0-9]\+\([.][0-9]\+\)\+\)"`
                    echo 7 > a.txt
                fi

                if [[ -f changes.txt ]]
                then
                   touch changes.txt
                   echo 8 > a.txt
                fi

                echo $version > latests.txt
                echo $content > content.txt
                echo 9 > a.txt
                sed -e 's/^/\* /' content.txt >> latests.txt
                echo 10 > a.txt
                
                cat latests.txt changes.txt > changes.txt
                echo 11 > a.txt
                git add changes.txt
                echo 12 > a.txt
                git commit -m "[skip ci] changes.txt updated"
                echo 13 > a.txt
                git push
                echo 14 > a.txt
            fi

  deploy:
    working_directory: ~/deploy
    docker:
      - image: ansible/ansible:ubuntu1604
    steps:
      - checkout
    
      - run:
          name: Clone git repo
          command: |            
            git clone git@github.com:pratik-ansible/backend-server.git
            
 
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
#      - deploy:
#           requires:
#              - build
